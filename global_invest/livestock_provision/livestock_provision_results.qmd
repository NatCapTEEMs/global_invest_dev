---
format:
  html:
    embed-resources: true
    standalone: true
    code-fold: true           # Fold code by default in HTML
    code-summary: "Show code"
  pdf:
    echo: false              # Hide code by default in PDF
  docx:
    echo: false              # Hide code by default in Word
  ipynb: 
    echo: true
---

# Livestock Provision Results

Text describing it. To be written by service team.

```{python}
#| output: false

### SETUP CODE: Runs the whole model if it doesn't exist, else loads the results. Doesn't output anything and all debugging surpressed for this QMD.

import os
import pandas as pd
import hazelbean as hb

from global_invest.livestock_provision import livestock_provision_initialization

# ProjectFlow object
p = hb.ProjectFlow() # Create a ProjectFlow Object to organize directories and enable parallel processing.
p.project_name = 'gep_livestock_provision'  # Determines the folder created to store intermediate and final results.
p.project_dir = os.path.join(os.path.expanduser('~'), 'Files', 'global_invest', 'projects', p.project_name) # Put it in the right location relative to the user's home directory.
p.base_data_dir = "G:/Shared drives/NatCapTEEMs/Files/base_data" # Set where data outside the project will be stored. CAUTION: For GEP we are using the shared Google Drive, but best practice is to use a local directory that you can control (also it's faster)
p.set_project_dir(p.project_dir) # Set the project directory in the ProjectFlow object. Also defines p.input_dir, p.intermediate_dir, and p.output_dir based on the project_dir.

# Task tree
# CRITICAL AND UNOBVIOUS, you CANNOT run the full service because this includes the generation of the qmd and the render line itself, thus calling this would infinitely loop.
livestock_provision_initialization.build_gep_service_calculation_task_tree(p) # Defines the actual logic of the model. Navigate into here to see what the model does.

# Project level attributes
p.df_countries_csv_path = p.get_path('cartographic', 'ee', 'ee_r264_correspondence.csv') # ProjectFlow downloads all files automatically via the p.get_path() function. 
p.gdf_countries_vector_path = p.get_path('cartographic', 'ee', 'ee_r264_correspondence.gpkg') 
p.gdf_countries_vector_simplified_path = p.get_path('cartographic', 'ee', 'ee_r264_simplified300sec.gpkg') 
p.results = {}  # All results will be stored here by each child task.
livestock_provision_initialization.initialize_paths(p)

# Run the model. This should be instantaneous if you've run the model before.
hb.log('Created ProjectFlow object at ' + p.project_dir + '\n    from script ' + p.calling_script + '\n    with base_data set at ' + p.base_data_dir)    
p.execute()
```





```{python}
#| output: false

### DISPLAY SETUP CODE: Based on the results in the prior cells, make the objectgs that will actually get displayed, like smol csvs or gpkg-as-pngs

import matplotlib.pyplot as plt
import pandas as pd
import os
import hazelbean as hb
from global_invest.livestock_provision import livestock_provision_functions
from global_invest.livestock_provision import livestock_provision_defaults

pd.set_option('display.float_format', '{:,.2f}'.format)
pd.set_option('display.max_rows', 1000)  # Set max rows to display
from IPython.display import Image, display
# pd.set_option('styler.render.index', False)

# Service label for this QMD
service_label = 'livestock_provision'

# Load the results
for k, v in p.results[service_label].items():
    # Load the results DataFrame
    df = hb.df_read(v)

    setattr(p, k, df)

    # SERVICE-SPECIFIC CODE CUSTOMIZATION GOES HERE: Put whatever you think should be displayed
    # E.g., generate manuscript-ready tables, calculate total values for inline text, make plot pngs, etc
    if k == 'gep_by_country_base_year':
        total_agricultural_value = df['livestock_provision_gep'].sum()
        p.gep_by_country_base_year_table = df[['iso3_r250_name', 'livestock_provision_gep']]

        # Group by useful aggregation columns explicitly and assign each as an attribute to p
        if 'income_grp' in df.columns:
            p.gep_by_income_grp_base_year_table = df.groupby('income_grp', as_index=False)['livestock_provision_gep'].sum()
            p.gep_by_income_grp_base_year_table = p.gep_by_income_grp_base_year_table[['income_grp', 'livestock_provision_gep']]
        if 'region_un' in df.columns:
            p.gep_by_region_un_base_year_table = df.groupby('region_un', as_index=False)['livestock_provision_gep'].sum()
            p.gep_by_region_un_base_year_table = p.gep_by_region_un_base_year_table[['region_un', 'livestock_provision_gep']]
        if 'continent' in df.columns:
            p.gep_by_continent_base_year_table = df.groupby('continent', as_index=False)['livestock_provision_gep'].sum()
            p.gep_by_continent_base_year_table = p.gep_by_continent_base_year_table[['continent', 'livestock_provision_gep']]
        if 'subregion' in df.columns:
            p.gep_by_subregion_base_year_table = df.groupby('subregion', as_index=False)['livestock_provision_gep'].sum()

            # p.gep_by_subregion_base_year_table = p.gep_by_country_base_year_table[['subregion', 'livestock_provision_gep']]
        
        # Save each plot table as a CSV in the current directory
        hb.df_write(p.gep_by_country_base_year_table, os.path.join(p.intermediate_dir, service_label, 'gep_result', 'gep_by_country_base_year_table.csv'))
        hb.df_write(p.gep_by_income_grp_base_year_table, os.path.join(p.intermediate_dir, service_label, 'gep_result', 'gep_by_income_grp_base_year_table.csv'))
        hb.df_write(p.gep_by_region_un_base_year_table, os.path.join(p.intermediate_dir, service_label, 'gep_result', 'gep_by_region_un_base_year_table.csv'))
        hb.df_write(p.gep_by_continent_base_year_table, os.path.join(p.intermediate_dir, service_label, 'gep_result', 'gep_by_continent_base_year_table.csv'))
        hb.df_write(p.gep_by_subregion_base_year_table, os.path.join(p.intermediate_dir, service_label, 'gep_result', 'gep_by_subregion_base_year_table.csv'))

        # Using the gpkg in gep_calculation, plot the GEP by country on a map

        import numpy as np
        import matplotlib as mpl

        gpkg_path = p.results[service_label]['gep_by_country_base_year'].replace('.csv', '.gpkg')
        gdf = hb.read_vector(gpkg_path)
        gdf = gdf[['iso3_r250_id', 'iso3_r250_name', 'livestock_provision_gep', 'geometry']]  # Keep only relevant columns

        # Add country borders for clarity
        borders = gdf.copy()
        borders['geometry'] = borders['geometry'].boundary

        # Set up log normalization for color mapping
        norm = mpl.colors.LogNorm(vmin=gdf['livestock_provision_gep'][gdf['livestock_provision_gep'] > 0].min(), vmax=gdf['livestock_provision_gep'].max())

        fig, ax = plt.subplots(figsize=(15, 10))
        gdf.plot(column='livestock_provision_gep', cmap='OrRd', legend=False, norm=norm, ax=ax)
        borders.plot(ax=ax, color='black', linewidth=0.5)

        # Add colorbar with actual livestock_provision_geps
        sm = plt.cm.ScalarMappable(cmap='OrRd', norm=norm)
        sm._A = []
        cbar = fig.colorbar(sm, ax=ax, orientation='vertical', fraction=0.03, pad=0.02)
        cbar.set_label("Gross Economic Product (GEP) in Base Year")
        cbar.ax.yaxis.set_major_formatter(mpl.ticker.FuncFormatter(lambda x, _: f'{int(x):,}'))

        ax.set_title('GEP by Country in Base Year')
        ax.set_axis_off()  # Hide the axis
        plt.savefig(os.path.join(p.intermediate_dir, service_label, 'gep_result', 'gep_by_country_base_year_map.png'), bbox_inches='tight', dpi=300)
        plt.close()

    

    if k == 'gep_by_year':
        p.gep_by_year_table = df[['year', 'livestock_provision_gep']]
        # Drop livestock_provision_geps that are zero
        p.gep_by_year_table = p.gep_by_year_table[p.gep_by_year_table['livestock_provision_gep'] > 0]
        hb.df_write(p.gep_by_year_table, os.path.join(p.intermediate_dir, service_label, 'gep_result', 'gep_by_year_table.csv'))

        # Also make a basic line graph as a png
        plt.figure(figsize=(10, 6))
        plt.plot(p.gep_by_year_table['year'], p.gep_by_year_table['livestock_provision_gep'], marker='o')
        plt.title('GEP by Year')  
        plt.xlabel('Year')
        plt.ylabel('Gross Economic Product (GEP)')
        plt.grid(True)
        plt.savefig(os.path.join(p.intermediate_dir, service_label, 'gep_result', 'gep_by_year_plot.png'), dpi=300)
        plt.close()

```

The analysis reveals that commercial agriculture generates a total gross economic product of $`{python} f"{total_agricultural_value:,.2f}"` across the study period. Below we present the results in various aggregations, ending with the GEP by country in the base year.

```{python}
# Display the GEP by income group table   
display(Image(os.path.join(p.intermediate_dir, service_label, 'gep_result', 'gep_by_country_base_year_map.png')))
```

## GEP by Income Group in Base Year
```{python}
# Display the GEP by income group table   
display(p.gep_by_income_grp_base_year_table)
```
## GEP by Region in Base Year
```{python}
# Display the GEP by income group table   
display(p.gep_by_region_un_base_year_table)
```
## GEP by Continent in Base Year
```{python}
# Display the GEP by income group table   
display(p.gep_by_continent_base_year_table)
```
## GEP by Subregion in Base Year
```{python}
# Display the GEP by income group table   
display(p.gep_by_subregion_base_year_table)
```
## GEP  Over Time
```{python}

display(Image(os.path.join(p.intermediate_dir, service_label, 'gep_result', 'gep_by_year_plot.png')))

# Display the GEP by income group table   
display(p.gep_by_year_table)
```


## GEP by Country in Base Year
```{python}
display(p.gep_by_country_base_year_table)
```
