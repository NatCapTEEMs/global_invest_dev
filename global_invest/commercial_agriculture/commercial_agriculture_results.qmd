---
format:
  html:
    embed-resources: true
    standalone: true
    code-fold: true           # Fold code by default in HTML
    code-summary: "Show code"
  pdf:
    echo: false              # Hide code by default in PDF
  docx:
    echo: false              # Hide code by default in Word
  ipynb: default
---

# Commercial Agriculture Results

Text describing it. To be written by service team.

```{python}
#| echo: false
#| output: false

### SETUP CODE: Runs the whole model if it doesn't exist, else loads the results. Doesn't output anything and all debugging surpressed for this QMD.

import os
import pandas as pd
import hazelbean as hb

from global_invest.commercial_agriculture import commercial_agriculture_initialization

# ProjectFlow object
p = hb.ProjectFlow() # Create a ProjectFlow Object to organize directories and enable parallel processing.
p.project_name = 'gep_commercial_agriculture'  # Determines the folder created to store intermediate and final results.
p.project_dir = os.path.join(os.path.expanduser('~'), 'Files', 'global_invest', 'projects', p.project_name) # Put it in the right location relative to the user's home directory.
p.base_data_dir = "G:/Shared drives/NatCapTEEMs/Files/base_data" # Set where data outside the project will be stored. CAUTION: For GEP we are using the shared Google Drive, but best practice is to use a local directory that you can control (also it's faster)
p.set_project_dir(p.project_dir) # Set the project directory in the ProjectFlow object. Also defines p.input_dir, p.intermediate_dir, and p.output_dir based on the project_dir.

# Task tree
# CRITICAL AND UNOBVIOUS, you CANNOT run the full service because this includes the generation of the qmd and the render line itself, thus calling this would infinitely loop.
commercial_agriculture_initialization.build_gep_service_calculation_task_tree(p) # Defines the actual logic of the model. Navigate into here to see what the model does.

# Project level attributes
p.countries_csv_path = p.get_path('cartographic', 'ee', 'ee_r264_correspondence.csv') # ProjectFlow downloads all files automatically via the p.get_path() function. 
p.countries_vector_path = p.get_path('cartographic', 'ee', 'ee_r264_correspondence.gpkg') 
p.results = {}  # All results will be stored here by each child task.
commercial_agriculture_initialization.initialize_paths(p)

# Run the model. This should be instantaneous if you've run the model before.
hb.log('Created ProjectFlow object at ' + p.project_dir + '\n    from script ' + p.calling_script + '\n    with base_data set at ' + p.base_data_dir)    
p.execute()
```





```{python}

### DISPLAY CODE: Based on the results in the prior cells, actually plot or display things.

import matplotlib.pyplot as plt
import pandas as pd
import os
import hazelbean as hb
from global_invest.commercial_agriculture import commercial_agriculture_functions
from global_invest.commercial_agriculture import commercial_agriculture_defaults


# Service label for this QMD
service_label = 'commercial_agriculture'

# Load the results
for k, v in p.results[service_label].items():
    # Load the results DataFrame
    df = hb.df_read(v)

    setattr(p, k, df)

    if k == 'gep_by_country_base_year':
        total_agricultural_value = df['Value'].sum()


```

The analysis reveals that commercial agriculture generates a total gross economic product of $`{python} f"{total_agricultural_value:,.2f}"` across the study period.

## Table of results

```{python}
display(p.gep_by_year)
```


